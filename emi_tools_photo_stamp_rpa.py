# -*- coding: utf-8 -*-

"""
/***************************************************************************
 emiTools
                                 A QGIS plugin
 This plugin compiles tools used by EMI-PB
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-10-10
        copyright            : (C) 2024 by Alexandre Parente Lima
        email                : alexandre.parente@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Alexandre Parente Lima'
__date__ = '2024-10-10'
__copyright__ = '(C) 2024 by Alexandre Parente Lima'

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import (Qt, QRect, QRectF, QDateTime, QFileInfo)
from qgis.PyQt.QtGui import (QImage, QPainter, QFont, QColor, QFontMetrics, QFontDatabase)
from qgis.PyQt.QtSvg import QSvgRenderer
from qgis.PyQt.QtWidgets import QApplication
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFolderDestination,
                       QgsProcessingParameterFile,
                       QgsProcessingParameterString,
                       QgsProcessingParameterColor,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterNumber,
                       QgsProcessingException,
                       QgsExifTools)

import os
import tempfile
from .emi_tools_util import tr
# ADAPTADO: Importações atualizadas para a nova estrutura de configuração.
from .emi_tools_photo_metadata import get_exif_data, get_translated_metadata_map, get_metadata_keys


class emiToolsStampPhotoRpa(QgsProcessingAlgorithm):
    INPUT_PHOTO = 'INPUT_PHOTO'
    OUTPUT_FOLDER = 'OUTPUT_FOLDER'
    STAMP_IMAGE = 'STAMP_IMAGE'
    INPUT_TEXT = 'INPUT_TEXT'
    METADATA_TO_STAMP = 'METADATA_TO_STAMP'
    FONT_COLOR = 'FONT_COLOR'
    FONT_SIZE = 'FONT_SIZE'
    FONT_NAME = 'FONT_NAME'
    POSITION = 'POSITION'

    POSITION_OPTIONS = ['Bottom Left', 'Bottom Right', 'Top Left', 'Top Right']

    def initAlgorithm(self, config=None):
        # Initializes the algorithm's parameters
        self.addParameter(
            QgsProcessingParameterFile(
                self.INPUT_PHOTO,
                tr('Input folder'),
                behavior=QgsProcessingParameterFile.Folder
            )
        )

        self.addParameter(
            QgsProcessingParameterFile(
                self.STAMP_IMAGE,
                tr('SVG Image'),
                extension='svg',
                optional=True
            )
        )

        self.addParameter(
            QgsProcessingParameterString(
                self.INPUT_TEXT,
                tr('Text'),
                defaultValue="",
                multiLine=True
            )
        )

        translated_map = get_translated_metadata_map()
        all_known_keys = get_metadata_keys()
        metadata_options_display = [translated_map[key] for key in all_known_keys]

        # Defines which fields are pre-selected by default
        untranslated_defaults = ['model',
                                 'timestamp',
                                 'coordinates',
                                 'altitude']
        default_indices = [all_known_keys.index(key) for key in untranslated_defaults if key in all_known_keys]

        self.addParameter(
            QgsProcessingParameterEnum(
                self.METADATA_TO_STAMP,
                tr('Metadata to stamp'),
                options=metadata_options_display,
                allowMultiple=True,
                defaultValue=default_indices
            )
        )

        font_db = QFontDatabase()
        fonts = font_db.families()

        # Get the default font from QGIS
        app = QApplication.instance()
        default_font = app.font().family()

        # Check if the default font is available on the system
        default_font_index = fonts.index(default_font) if default_font in fonts else 0

        # Add the Enum parameter to select the font
        self.addParameter(
            QgsProcessingParameterEnum(
                self.FONT_NAME,
                tr('Font'),
                options=fonts,
                defaultValue=default_font_index
            )
        )

        self.addParameter(
            QgsProcessingParameterColor(
                self.FONT_COLOR,
                tr('Font color'),
                defaultValue=QColor(255, 255, 0)
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                self.FONT_SIZE,
                tr('Font size'),
                defaultValue=60,
                minValue=1,
                maxValue=500
            )
        )

        # Return the translated options for display to the user
        def get_translated_position_options():
            """Retorna uma lista de opções de posição traduzidas para a interface."""
            return [
                tr('Bottom Left'),
                tr('Bottom Right'),
                tr('Top Left'),
                tr('Top Right')
            ]

        # Calling the function to get the translated options
        self.addParameter(
            QgsProcessingParameterEnum(
                self.POSITION,
                tr('Position of text and image'),
                options=get_translated_position_options(),
                defaultValue=0
            )
        )

        self.addParameter(
            QgsProcessingParameterFolderDestination(
                self.OUTPUT_FOLDER,
                tr('Output folder')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        # Loads the input raster layers
        input_folder = self.parameterAsString(parameters, self.INPUT_PHOTO, context)

        # List the image files in the folder
        image_extensions = ('.jpg', '.jpeg', '.tif', '.tiff', '.png')
        input_photos = [os.path.join(input_folder, f) for f in os.listdir(input_folder) if
                        f.lower().endswith(image_extensions)]

        # Get output folder
        output_folder = self.parameterAsString(parameters, self.OUTPUT_FOLDER, context)
        if not output_folder: output_folder = tempfile.mkdtemp()
        if not os.path.exists(output_folder): os.makedirs(output_folder)

        svg_file_path = self.parameterAsFile(parameters, self.STAMP_IMAGE, context)

        # Collects text and style parameters
        input_text = self.parameterAsString(parameters, self.INPUT_TEXT, context)
        font_color = self.parameterAsColor(parameters, self.FONT_COLOR, context)
        font_size = self.parameterAsInt(parameters, self.FONT_SIZE, context)

        # get font
        font_index = self.parameterAsEnum(parameters, self.FONT_NAME, context)
        font_db = QFontDatabase()
        fonts = font_db.families()
        font_name = fonts[font_index]

        # Use the index to access the string (untranslated)
        position_index = self.parameterAsInt(parameters, self.POSITION, context)
        position = self.POSITION_OPTIONS[position_index]

        # Get the user-selected keys
        translated_map = get_translated_metadata_map()
        all_known_keys = get_metadata_keys()
        selected_indices = self.parameterAsEnums(parameters, self.METADATA_TO_STAMP, context)
        internal_keys_to_stamp = [all_known_keys[i] for i in selected_indices]

        # Processes each selected image
        for raster_file_path in input_photos:
            input_qimage = QImage(raster_file_path)

            if input_qimage.isNull():
                feedback.pushWarning(tr("Failed to load input image: {}").format(raster_file_path))
                continue

            # Fetches the full EXIF tag backup ('full_map') to preserve it in the output file.
            exif_data = get_exif_data(raster_file_path, internal_keys_to_stamp, extract_all_tags=False, include_full_map=True)

            # Transform the input_text into a list of lines while preserving empty paragraphs
            if input_text:
                lines_to_stamp = input_text.splitlines()
            else:
                lines_to_stamp = []

            # Add the selected metadata as separate lines (keeping empty lines if any)
            for key in internal_keys_to_stamp:
                value = exif_data.get(key)
                if value is not None:
                    friendly_name = translated_map.get(key, key)
                    if isinstance(value, float):
                        formatted_value = f"{value:.2f}"
                    elif isinstance(value, QDateTime):
                        formatted_value = value.toString("dd-MM-yyyy HH:mm:ss")
                    else:
                        formatted_value = str(value)
                    lines_to_stamp.append(f"{friendly_name}: {formatted_value}")

            self.insert_stamp(input_qimage, svg_file_path, font_color, font_size, position, font_name, lines_to_stamp, feedback)
            output_image_path = self.save_image(input_qimage, raster_file_path, output_folder, feedback)

            self.insert_exif_data(output_image_path, exif_data.get('full_map', {}), feedback)
            feedback.pushInfo(tr(f"Image saved at {output_image_path}"))

        return {self.OUTPUT_FOLDER: output_folder}


    def insert_stamp(self, input_qimage, svg_file_path, font_color, font_size, position, font_name, lines_to_stamp, feedback):
        painter = QPainter(input_qimage)

        # Input image dimensions
        image_width = painter.device().width()
        image_height = painter.device().height()

        # Set font
        font = QFont(font_name, font_size)
        painter.setFont(font)

        # Ensure that no None entries remain
        full_text_lines = [line if line is not None else '' for line in lines_to_stamp]

        # Create the final text preserving line breaks and empty paragraphs
        full_text = "\n".join(full_text_lines)

        if (not full_text.strip()) and not svg_file_path:
            painter.end()
            return

        metrics = QFontMetrics(font)
        line_spacing = metrics.lineSpacing()

        # Count all lines, including empty ones
        num_lines = max(1, len(full_text.split('\n')))
        total_text_height = line_spacing * num_lines

        image_offset = 50

        svg_width, svg_height = 0, 0
        svg_renderer = None
        if svg_file_path:
            svg_renderer = QSvgRenderer(svg_file_path)
            if svg_renderer.isValid():
                svg_size = svg_renderer.defaultSize()
                if svg_size.height() > 0:
                    svg_aspect_ratio = svg_size.width() / svg_size.height()
                    svg_height = total_text_height if total_text_height > 0 else 100
                    svg_width = svg_height * svg_aspect_ratio
            else:
                feedback.pushWarning(tr(f"Failed to load SVG file: {svg_file_path}"))
                svg_renderer = None

        text_width = image_width - (2 * image_offset) - (svg_width + image_offset if svg_renderer else 0)
        h_offset = svg_width + image_offset if svg_renderer else 0

        if position == 'Bottom Left':
            alignment = Qt.AlignLeft | Qt.AlignBottom
            svg_y_base = image_height - image_offset - (max(total_text_height, svg_height))
            svg_x, svg_y = image_offset, svg_y_base + (max(total_text_height, svg_height) - svg_height) / 2
            text_x, text_y = svg_x + h_offset, image_height - image_offset - total_text_height
        elif position == 'Bottom Right':
            alignment = Qt.AlignRight | Qt.AlignBottom
            svg_y_base = image_height - image_offset - (max(total_text_height, svg_height))
            svg_x, svg_y = image_width - image_offset - svg_width, svg_y_base + (
                    max(total_text_height, svg_height) - svg_height) / 2
            text_x, text_y = image_offset, image_height - image_offset - total_text_height
        elif position == 'Top Left':
            alignment = Qt.AlignLeft | Qt.AlignTop
            svg_y_base = image_offset
            svg_x, svg_y = image_offset, svg_y_base + (max(total_text_height, svg_height) - svg_height) / 2
            text_x, text_y = svg_x + h_offset, image_offset
        else:  # Top Right
            alignment = Qt.AlignRight | Qt.AlignTop
            svg_y_base = image_offset
            svg_x, svg_y = image_width - image_offset - svg_width, svg_y_base + (
                    max(total_text_height, svg_height) - svg_height) / 2
            text_x, text_y = image_offset, image_offset

        text_rect = QRect(int(text_x), int(text_y), int(text_width), int(total_text_height))
        painter.setPen(QColor(font_color))
        painter.drawText(text_rect, alignment, full_text)

        if svg_renderer:
            svg_rect = QRectF(svg_x, svg_y, svg_width, svg_height)
            svg_renderer.render(painter, svg_rect)

        painter.end()

    def insert_exif_data(self, temp_file_path, full_map_exif, feedback):
        if not full_map_exif: return
        exif_tools = QgsExifTools()

        # Iterate over full_map_exif and tag each EXIF tag into the image
        for tag, value in full_map_exif.items():
            try:
                exif_tools.tagImage(temp_file_path, tag, value)
            except Exception as e:
                feedback.pushInfo(tr(f"Could not write tag {tag}: {str(e)}"))

    def save_image(self, input_qimage, raster_file_path, output_folder, feedback):
        raster_file_info = QFileInfo(raster_file_path)
        output_image_path = os.path.join(output_folder,
                                         raster_file_info.baseName() + '_stamped.' + raster_file_info.suffix())
        if not os.path.exists(output_folder):
            os.makedirs(output_folder)

        # Check if the image was loaded correctly
        if input_qimage.isNull():
            raise QgsProcessingException("Failed to load the temporary image.")

        # Save the processed image to the specified output folder
        if input_qimage.save(output_image_path):
            return output_image_path
        else:
            raise QgsProcessingException("Failed to save the processed image.")

    def name(self):
        return "emiToolsStampPhotoRpa"

    def displayName(self):
        return tr("Stamp text and image on the photo")

    def group(self):
        return tr("Emi Tools")

    def groupId(self):
        return ""

    def shortHelpString(self):
        return tr(
            "This algorithm inscribes text and an optional SVG logo onto JPEG or PNG images using EXIF metadata such as coordinates, altitude, date, and camera model. "
            "The stamp position, font style, and color are customizable. The processed images are saved in the output folder, preserving EXIF data."
        )

    def createInstance(self):
        return emiToolsStampPhotoRpa()
